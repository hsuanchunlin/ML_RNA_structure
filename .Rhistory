O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red")
lines(fraction, Rso)
a = 1.5
b = 1.5
UR1 = 0.5
UR2 = 0.5
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red")
lines(fraction, Rso)
a = 1.5
b = 1.5
UR1 = 0.2
UR2 = 0.2
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red")
lines(fraction, Rso)
a = 2
b = 1
UR1 = 0.2
UR2 = 0.2
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red")
lines(fraction, Rso)
a = 2
b = 1
UR1 = 0.2
UR2 = 0.2
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red", ylim = c(0,1))
lines(fraction, Rso)
a = 2
b = 1
UR1 = 0.2
UR2 = 0.2
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red", ylim = c(0,0.5))
lines(fraction, Rso)
a = 2
b = 1
UR1 = 0.2
UR2 = 0.2
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red", ylim = c(0.3,0.6))
lines(fraction, Rso)
a = 2
b = 1
UR1 = 0.2
UR2 = 0.2
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red", ylim = c(0.4,0.6))
lines(fraction, Rso)
a = 2
b = 1
UR1 = 0.1
UR2 = 0.1
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red", ylim = c(0.4,0.6))
lines(fraction, Rso)
a = 2.5
b = 0.5
UR1 = 0.1
UR2 = 0.1
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red", ylim = c(0.4,0.6))
lines(fraction, Rso)
a = 2.5
b = 0.5
UR1 = 0.1
UR2 = 0.1
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red")
lines(fraction, Rso)
a = 2.5
b = 0.5
UR1 = 0.5
UR2 = 0.5
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red")
lines(fraction, Rso)
a = 2
b = 1
UR1 = 0.5
UR2 = 0.5
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red")
lines(fraction, Rso)
ln.Rs = log((O.18s/O.16s))
ln.Rso = log(O.18so/O.16so)
plot(fraction, ln.Rs, ty = "l", col = "red")
lines(fraction, ln.Rso)
a = 1
b = 2
UR1 = 0.5
UR2 = 0.5
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red")
lines(fraction, Rso)
ln.Rs = log((O.18s/O.16s))
ln.Rso = log(O.18so/O.16so)
plot(fraction, ln.Rs, ty = "l", col = "red")
lines(fraction, ln.Rso)
a = 2
b = 1
UR1 = 0.5
UR2 = 0.5
k1 = 0.309
k2 = 0.3
time = seq(0,10,by= 0.01)
#time = c(0, 1.15,2.24,3.89, 7.45)
q = length(time)
noize = rnorm(q, mean = 0, sd = 0.0003)
ori = b/a
O.16p = a*(1-UR1)*(1-exp(-k1*time)) + noize
O.18p = b*(1-UR2)*(1-exp(-k2*time)) + noize
O.16s = a - O.16p
O.18s = b - O.18p
Rs = (O.18s/O.16s)
O.16po = a*(1-exp(-k1*time))+ noize
O.18po = b*(1-exp(-k2*time))+ noize
O.16so = a - O.16po
O.18so = b - O.18po
fraction = 1-exp(-k1*time)
Rso = O.18so/O.16so
plot(fraction, Rs, ty = "l", col = "red")
lines(fraction, Rso)
ln.Rs = log((O.18s/O.16s))
ln.Rso = log(O.18so/O.16so)
plot(fraction, ln.Rs, ty = "l", col = "red")
lines(fraction, ln.Rso)
ln.Rs = log((O.18s/O.16s/ori))
ln.Rso = log(O.18so/O.16so/ori)
plot(fraction, ln.Rs, ty = "l", col = "red")
lines(fraction, ln.Rso)
setwd("K:/Jing")
library(arules)
library(arulesViz)
#import data
data <- read.csv("21ABC rk ave summary-U.csv", header=T)
#Before we start, we need to discretize our data if they are numerical.
#lgkon.dis <- discretize(log(koff[,2]), categories=4)
#lgka.dis <- discretize(log(koff[,3]), categories=4)
#koff.dis <- discretize(koff[,4], categories=4)
#MFE.dis <- discretize(MFE.filter[,2], categories = 4)
rkA.dis <- cut(log(data[,2]), breaks = seq(-10,10, by = 0), labels = c("LOW","HIGH"))
rkB.dis <- cut(log(data[,3]), breaks = seq(-10,10, by = 0), labels = c("LOW","HIGH"))
rkC.dis <- cut(log(data[,4]), breaks = seq(-10,10, by = 0), labels = c("LOW","HIGH"))
rkA.dis <- cut(log(data[,2]), breaks = seq(-10,10, by = 1), labels = c("LOW","HIGH"))
rkA.dis <- cut(log(data[,2]), breaks = seq(-10,10, by = 2), labels = c("LOW","HIGH"))
rkA.dis <- cut(log(data[,2]), breaks = seq(-10,10, by = 10), labels = c("LOW","HIGH"))
rkA.dis <- cut(log(data[,2]), breaks = seq(-10,10, by = 10), labels = c("LOW","HIGH"))
rkB.dis <- cut(log(data[,3]), breaks = seq(-10,10, by = 10), labels = c("LOW","HIGH"))
rkC.dis <- cut(log(data[,4]), breaks = seq(-10,10, by = 10), labels = c("LOW","HIGH"))
MFEA.dis <- discretize(data[,5], categories = 3)
MFEB.dis <- discretize(data[,6], categories = 3)
MFEC.dis <- discretize(data[,7], categories = 3)
TableForAnalysis <- data.frame(cbind(rkA.dis, rkB.dis, rkC.dis, MFEA.dis, MFEB.dis, MFEC.dis))
TableForAnalysis$Sequence <- data[,1]
colnames(TableForAnalysis) <- c("rkA.dis", "rkB.dis", "rkC.dis", "MFEA.dis", "MFEB.dis", "MFEC.dis")
str(TableForAnalysis)
#Why do we need to use str
# find association rules with default settings
AnalysisTable <- TableForAnalysis[,1:6]
# To do it for all names
col_names <- names(AnalysisTable)
# do do it for some names in a vector named 'col_names'
AnalysisTable[,col_names] <- lapply(AnalysisTable[,col_names] , factor)
#sum(!is.finite(AnalysisTable))
rules <- apriori(AnalysisTable)
inspect(rules)
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
MFEB.dis
rules <- apriori(AnalysisTable,
parameter = list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("rkB.dis = 1", "rkb.dis = 2"),default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
plot(rules)
rules <- apriori(AnalysisTable,
parameter = list(minlen=2, supp=0.01, conf=0.8),
appearance = list(rhs=c("rkB.dis = 1", "rkb.dis = 2"),default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
# find redundant rules
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
# remove redundant rules
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
plot(rules)
plot(rules, method="graph", control=list(type="items"))
TableForAnalysis <- data.frame(cbind(rkA.dis, rkB.dis, MFEB.dis))
TableForAnalysis$Sequence <- data[,1]
colnames(TableForAnalysis) <- c("rkA.dis", "rkB.dis", "MFEB.dis")
str(TableForAnalysis)
head(TableForAnalysis)
AnalysisTable <- TableForAnalysis[,1:3]
# To do it for all names
col_names <- names(AnalysisTable)
# do do it for some names in a vector named 'col_names'
AnalysisTable[,col_names] <- lapply(AnalysisTable[,col_names] , factor)
rules <- apriori(AnalysisTable)
inspect(rules)
rules <- apriori(AnalysisTable,
parameter = list(minlen=2, supp=0.01, conf=0.8),
appearance = list(rhs=c("rkB.dis = 1", "rkb.dis = 2"),default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
# remove redundant rules
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
rules <- apriori(AnalysisTable,
parameter = list(minlen=2, supp=0.005, conf=0.8),
appearance = list(rhs=c("rkB.dis = 1", "rkb.dis = 2"),default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
# find redundant rules
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
# remove redundant rules
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
plot(rules)
plot(rules, method="graph", control=list(type="items"))
plot(rules, method="matrix3D", measure="lift")
plot(rules, method="matrix", measure="lift", control=list(reorder=FALSE))
plot(rules, method="grouped")
rules <- apriori(AnalysisTable,
parameter = list(minlen=2, supp=0.002, conf=0.5),
appearance = list(rhs=c("rkB.dis = 1", "rkb.dis = 2"),default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
# find redundant rules
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
# remove redundant rules
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
rules <- apriori(AnalysisTable,
parameter = list(minlen=2, supp=0.002, conf=0.5),
appearance = list(rhs=c("MFEB.dis = 1", "MFEB.dis = 2"),default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
rules <- apriori(AnalysisTable,
parameter = list(minlen=2, supp=0.001, conf=0.5),
appearance = list(rhs=c("MFEB.dis = 1", "MFEB.dis = 2"),default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
# find redundant rules
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
# remove redundant rules
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
data.ana = data[data$X21B.1.6 >= 0.8 & data$MFEB < -6,]
View(data.ana)
max(data$MFEB)
data.ana = data[data$X21B.1.6 >= 0.8 & data$MFEB < -7,]
View(data)
View(data.ana)
min(data$MFEB)
